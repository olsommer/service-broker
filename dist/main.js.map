{"mappings":"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","sources":["src/index.ts","src/utils/spawn.ts","src/handle.ts","src/tasks/scrape/index.ts","src/tasks/log/index.ts","src/utils/supabase.ts","src/tasks/scrape/isValid.ts","src/tasks/scrape/transformUrl.ts","src/tasks/summarize/index.ts","src/utils/openai.ts","src/tasks/next/index.ts","src/tasks/generate_line/index.ts","src/tasks/finish/index.ts","src/tasks/billing/index.ts"],"sourcesContent":["import { spawnChild } from \"./utils/spawn\";\nimport { realtime } from \"./utils/supabase\";\n\nconst channel = realtime.channel(\"#id\");\n\nchannel.on(\n  \"postgres_changes\",\n  {\n    event: \"*\",\n    schema: \"public\",\n    table: \"leads_jobs\",\n  },\n  (payload) => spawnChild(payload),\n);\n\nchannel.subscribe((status, err) => {\n  if (status === \"SUBSCRIBED\") {\n    console.log(\"Connected!\");\n  }\n\n  if (status === \"CHANNEL_ERROR\") {\n    console.log(`There was an error subscribing to channel: ${err?.message}`);\n  }\n\n  if (status === \"TIMED_OUT\") {\n    console.log(\"Realtime server did not respond in time.\");\n  }\n\n  if (status === \"CLOSED\") {\n    console.log(\"Realtime channel was unexpectedly closed.\");\n  }\n});\n","import { spawn } from \"child_process\";\nimport { handle } from \"../handle\";\n\nexport const spawnChild = (payload) => {\n  const payloadString = JSON.stringify(payload);\n  const child = spawn(\"node\", [\n    \"-e\",\n    `(${handle.toString()})(JSON.parse('${payloadString}'))`,\n  ], {\n    cwd: process.cwd(),\n    detached: true,\n    stdio: \"inherit\",\n  });\n  //   const child = spawn(\"node\", [\"./worker.js\", payloadString]);\n\n  //   child.stdout.setEncoding(\"utf8\");\n  //   child.stdout.on(\"data\", (data) => {\n  //     console.log(`stdout: ${data}`);\n  //   });\n\n  //   child.stderr.on(\"data\", (data) => {\n  //     console.log(`stdout: ${data}`);\n  //   });\n\n  // Handle process events\n  child.on(\"exit\", (code, signal) => {\n    if (code === 0) {\n      console.log(\"Worker finished successfully.\");\n    } else {\n      console.error(`Worker failed with code ${code} and signal ${signal}.`);\n    }\n  });\n};\n","import { FlagStates } from \"./utils/states\";\nimport { Tables } from \"./utils/database.helpers\";\nimport { scrape } from \"./tasks/scrape\";\nimport { summarize } from \"./tasks/summarize\";\nimport { generate } from \"./tasks/generate_line\";\nimport { log } from \"./tasks/log\";\nimport { finish } from \"./tasks/finish\";\nimport { retry } from \"./tasks/retry\";\n\ntype Payload = {\n  schema: string;\n  table: string;\n  commit_timestamp: string;\n  eventType: \"UPDATE\" | \"INSERT\";\n  new: Tables<\"leads_jobs\">;\n  old: Tables<\"leads_jobs\"> | null;\n  errors: any[];\n};\n\nexport async function handle(payload: Payload) {\n  console.log(payload);\n  let id: string = \"\";\n  try {\n    const { new: record, old: old_record } = payload;\n    id = record.id;\n\n    switch (record.status as FlagStates) {\n      case (\"FLAG_TO_SCRAPE\"):\n        await scrape(record);\n        break;\n      case (\"FLAG_TO_SUMMARIZE\"):\n        await summarize(record);\n        break;\n      case (\"FLAG_TO_GENERATE\"):\n        await generate(record);\n        break;\n      case (\"FLAG_TO_FINISH\"):\n        await finish(record);\n        break;\n      case (\"DONE\"):\n        break;\n      case (\"FLAG_TO_RETRY\"):\n        // if (!old_record) throw new Error(\"No old_record provided\");\n        console.log(\"RETRY\");\n        // await retry(record, old_record);\n        break;\n    }\n  } catch (error) {\n    console.error(error.message);\n    await log(\"ERROR\", error.message, id, \"task_manager\");\n  }\n}\n","import axios from \"axios\";\nimport { log } from \"../log\";\nimport { isValidUrl } from \"./isValid\";\nimport { transformUrl } from \"./transformUrl\";\nimport { Tables } from \"../../utils/database.helpers\";\nimport { supa } from \"../../utils/supabase\";\nimport { Json } from \"../../utils/database.types\";\n\nexport async function scrape(record: Tables<\"leads_jobs\">) {\n  const { id, lead_id } = record;\n  try {\n    if (!lead_id) throw new Error(\"No lead_id provided\");\n    const uuid = crypto.randomUUID();\n\n    // Get lead data\n    // --------------------------------------\n    const { data: leadData, error: leadErr } = await supa\n      .from(\"leads\")\n      .select(\"*\")\n      .eq(\"id\", lead_id)\n      .limit(1)\n      .single();\n    if (leadErr) throw leadErr;\n    if (!leadData) throw new Error(\"No data\");\n    const url = (leadData.lead as { Website?: string }).Website;\n    if (!url) throw new Error(\"Website URL is empty or null\");\n\n    // Transform url\n    // -------------------------------------------------\n    if (isValidUrl(url) === false) {\n      await log(\"ERROR\", \"result: invalid url\", id, \"scrape\");\n    }\n    const tUrl = transformUrl(url);\n\n    // Scraping job\n    // -------------------------------------------------\n    const callbackURL =\n      `https://ndxhivyksquaghuolyig.supabase.co/functions/v1/webhook?scrapeId=${uuid}&leadJobId=${id}`;\n    const key = \"69113361a61d29ac2e511e2fa563f2bf\";\n    const body = {\n      apiKey: key,\n      url: tUrl,\n      callback: {\n        type: \"webhook\",\n        url: callbackURL,\n      },\n    };\n    const reqURL = \"https://async.scraperapi.com/jobs\";\n\n    // -------------------------------------------------\n    axios.post(reqURL, body, {\n      headers: { \"Content-Type\": \"application/json\" },\n    }).then(async (res) => {\n      await log(\"OK\", res as any, id, \"scrape\");\n      //\n      //\n      // Add dummy scrape but without any content\n      const { error } = await supa\n        .from(\"scrapes\")\n        .insert({\n          id: uuid,\n          lead_job_id: id,\n          log_request: res,\n          log_callback_url: callbackURL,\n        });\n      if (error) throw error;\n      //\n      /* Error handling */\n    }).catch((err) => {\n      throw err;\n    });\n    //\n    /* Error handling */\n  } catch (error) {\n    await log(\"ERROR\", error.message, id, \"scrape\");\n  }\n}\n","import { Json } from \"../../utils/database.types\";\nimport { supa } from \"../../utils/supabase\";\n\nexport async function log(\n  status: \"OK\" | \"ERROR\",\n  meta: Json,\n  id: string,\n  task: string,\n) {\n  const { error } = await supa\n    .from(\"leads_jobs_logs\")\n    .insert({\n      status,\n      meta,\n      ref_id: id,\n      task,\n    });\n  if (error) throw error;\n}\n","// WARNING: The service role key has admin priviliges and should only be used in secure server environments!\nimport { RealtimeClient } from \"@supabase/realtime-js\";\nimport { createClient } from \"@supabase/supabase-js\";\n\n// import { Database } from \"./db_types.ts\";\nimport { Database } from \"./database.types\";\n\nconst rturl = \"wss://ndxhivyksquaghuolyig.supabase.co/realtime/v1\";\n// wss://[project-ref].supabase.co/realtime/v1/websocket?apikey=[anon-token]&log_level=info&vsn=1.0.0\nconst url = \"https://ndxhivyksquaghuolyig.supabase.co\";\nconst key =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5keGhpdnlrc3F1YWdodW9seWlnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY5MjI3NjEyNywiZXhwIjoyMDA3ODUyMTI3fQ.hRHgz6ZomMHf7RlKUp1JeoYx0frcvqELHxof4GN9RRk\";\n\nif (!url) throw new Error(\"Missing url\");\nif (!key) throw new Error(\"Missing service role key\");\n\n/* Supabase Realtime Client */\nexport const realtime = new RealtimeClient(rturl, {\n  params: {\n    apikey: key,\n    reconnect: true,\n  },\n});\n\n/* Supabase Client */\nexport const supa = createClient<Database>(url, key);\n","export function isValidUrl(url: string): boolean {\n  const urlPattern = /^(https?:\\/\\/)?([a-zA-Z0-9.-]+)(:[0-9]+)?(\\/[^\\s]*)?$/;\n  return urlPattern.test(url);\n}\n","export function transformUrl(inputUrl: string): string {\n  // Remove 'https://' or 'http://' if present\n  let transformedUrl = inputUrl.replace(/^(https?:\\/\\/)/, \"\");\n\n  // Remove 'www.' if present\n  transformedUrl = transformedUrl.replace(/^www\\./, \"\");\n\n  // Add 'https://' back if the input URL had it\n  if (inputUrl.startsWith(\"https://\")) {\n    transformedUrl = \"https://\" + transformedUrl;\n  } else if (inputUrl.startsWith(\"http://\")) {\n    transformedUrl = \"http://\" + transformedUrl;\n  }\n\n  return transformedUrl;\n}\n","import { log } from \"../log\";\nimport { supa } from \"../../utils/supabase\";\nimport { openai } from \"../../utils/openai\";\nimport { Tables } from \"../../utils/database.helpers\";\nimport { setNextState } from \"../next\";\n\nexport async function summarize(record: Tables<\"leads_jobs\">) {\n  const { id, job_id } = record;\n  try {\n    if (!job_id) throw new Error(\"No job id\");\n    // Get form data\n    // --------------------------------------\n    const { data: scrData, error: scrErr } = await supa\n      .from(\"scrapes\")\n      .select(\"*\")\n      .eq(\"lead_job_id\", id)\n      .order(\"created_at\", { ascending: false })\n      .limit(1)\n      .single();\n    if (scrErr) throw scrErr;\n    if (!scrData || !scrData.content_cleaned) throw new Error(\"No data\");\n    const content_cleaned = scrData.content_cleaned;\n\n    // Get job data\n    // --------------------------------------\n    const { data: jobsData, error: jobsErr } = await supa\n      .from(\"jobs\")\n      .select(\"*\")\n      .eq(\"id\", job_id)\n      .limit(1)\n      .single();\n    if (jobsErr) throw jobsErr;\n    if (!jobsData) throw new Error(\"No data\");\n    const form = jobsData.meta as { focus: string; industry: string };\n\n    // Clean HTML\n    // --------------------------------------\n    // const content_cleaned = convertToPlain(content);\n\n    // Prompt Focus\n    // --------------------------------------\n    const focusPrompt = `Try to focus on ${\n      form.focus ? form.focus : \"compliments about the company\"\n    }.`;\n\n    // Sending the cleaned version to OPEN-AI\n    // --------------------------------------\n    const prompt = `Scraped Website: ${content_cleaned}\n      \\n\\n \n      Write a summary of a company based on the aboved scraped website. ${focusPrompt}\n       This content will later be used to create an icebreaker. \n       Write at least 5 sentences.\n       `;\n    //\n    const chatCompletion = await openai.chat.completions.create({\n      messages: [{ role: \"user\", content: prompt }],\n      model: \"gpt-3.5-turbo\",\n      stream: false,\n    });\n    const summary = chatCompletion.choices[0].message.content;\n    const meta = {\n      model: chatCompletion.model,\n      prompt_tokens: chatCompletion.usage?.prompt_tokens,\n      completion_tokens: chatCompletion.usage?.completion_tokens,\n      total_tokens: chatCompletion.usage?.total_tokens,\n    };\n\n    // Save the summary content to the database\n    // --------------------------------------\n    const { error } = await supa\n      .from(\"summaries\")\n      .insert(\n        {\n          content: summary,\n          meta,\n          type: \"HOMEPAGE\",\n          lead_job_id: id,\n        },\n      );\n    if (error) throw error;\n    await setNextState(id, \"FLAG_TO_GENERATE\");\n  } catch (error) {\n    console.log(error);\n    await log(\"ERROR\", error.message, id, \"summarize\");\n  }\n}\n","import OpenAI from \"openai\";\n\nexport const openai = new OpenAI({\n  apiKey: \"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\",\n});\n","import { supa } from \"../../utils/supabase\";\nimport { log } from \"../log\";\nimport { FlagStates } from \"../../utils/states\";\n\nexport async function setNextState(\n  id: string,\n  status: FlagStates,\n  tries?: number,\n) {\n  const { error } = await supa\n    .from(\"leads_jobs\")\n    .update({\n      status,\n      tries,\n    })\n    .eq(\"id\", id);\n  if (error) throw error;\n  await log(\"OK\", status, id, \"next state\");\n}\n","import { Tables } from \"../../utils/database.helpers\";\nimport { openai } from \"../../utils/openai\";\nimport { supa } from \"../../utils/supabase\";\nimport { log } from \"../log\";\nimport { setNextState } from \"../next\";\n\nexport async function generate(record: Tables<\"leads_jobs\">) {\n  const { id, lead_id, job_id } = record;\n  try {\n    if (!job_id) throw new Error(\"No job id\");\n    // Get form data\n    // --------------------------------------\n    const { data: jobsData, error: jobsErr } = await supa\n      .from(\"jobs\")\n      .select(\"*\")\n      .eq(\"id\", job_id)\n      .limit(1)\n      .single();\n    if (jobsErr) throw jobsErr;\n    if (!jobsData) throw new Error(\"No data\");\n    const form = jobsData.meta as { focus: string; industry: string };\n\n    // Get summary data\n    // --------------------------------------\n    const { data: sumData, error: sumErr } = await supa\n      .from(\"summaries\")\n      .select(\"*\")\n      .eq(\"lead_job_id\", id)\n      .order(\"created_at\", { ascending: false })\n      .limit(1)\n      .single();\n\n    if (sumErr) throw sumErr;\n    if (!sumData || !sumData.content) throw new Error(\"No data\");\n    const content = sumData.content;\n\n    // --------------------------------------\n    const focus = form.focus ??\n      \"Compliments about the company\";\n\n    const industryPrompt = form.industry\n      ? `The prospects industry is ${form.industry}.`\n      : \"\";\n\n    const templates = () => {\n      const _focus = form.focus;\n      switch (form.focus) {\n        case \"Mock referral\":\n          return `Please use one of the following templates: \n          \"\"\"{top connection name} referred me to you so I thought I'd reach out.\"\"\" \\n \n          \"\"\"I got your contact info from {top connection name}.\"\"\"`;\n\n        case \"Compliments about company\":\n          return `Please use one of the following templates: \n          \"\"\"I really like the {service/product} you guys are doing/selling at {company}.\"\"\"\\n \n          \"\"\"It's really impressive to see all the {products/services} you guys are offering at {company}.\"\"\"`;\n\n        case \"Trends and challenges of industry\":\n          return `Please use one of the following templates: \n          \"\"\"I've been tracking the {industry} industry closely, and it's evident that companies are grappling with the challenge of {specific challenge}.\"\"\"\\n \n          \"\"\"The {industry} sector has always fascinated me, and the current trend of {specific trend} has piqued my interest.\"\"\"`;\n\n        case \"Things in common\":\n          return `Please use one of the following templates: \n          \"\"\"I saw that we have {common interest} thing in common.\"\"\"\\n\n          \"\"\"I couldn't help but notice our shared interest in {common interest}.\"\"\"`;\n\n        case \"Looking for their service mock\":\n          return `Please use one of the following templates: \n          \"\"\"I was looking for {service/product} and I came across {company}.\"\"\"\n          \"\"\"Earlier, I was searching for {service/product} and I stumbled across your company, {company}.\"\"\"`;\n      }\n    };\n\n    // Sending the cleaned version to OPEN-AI\n    // Prompts\n    // Neither generate questions nor exclamation marks.\n    // Make it as personal as possible by using the summary of the scraped homepage.\n    const prompt = `Summary of the scraped homepage: ${content}. \n    \\n\\n\n    Instruction: Above is a summary of the scraped homepage. \n    Write a personalized icebreaker (only the first two lines of a cold email) based on the scraped homepage. ${industryPrompt}\n    The goal is to act like a genuine person writing this personalized icebreaker so that there is a higher response from the cold email.\n    Write in a authentic, realistic, less flattering, down to earth and casual tone. \n    Write a maximum of two shorter sentences.\n    Only output raw trimmed text.\n    ${templates()}\n    \\n\\n\n    `;\n\n    // --------------------------------------\n    console.log(prompt);\n    const chatCompletion = await openai.chat.completions.create({\n      messages: [{ role: \"user\", content: prompt }],\n      model: \"gpt-3.5-turbo\",\n      stream: false,\n    });\n    const generated_line = chatCompletion.choices[0].message.content;\n    const meta = {\n      model: chatCompletion.model,\n      prompt_tokens: chatCompletion.usage?.prompt_tokens,\n      completion_tokens: chatCompletion.usage?.completion_tokens,\n      total_tokens: chatCompletion.usage?.total_tokens,\n    };\n    // --------------------------------------\n\n    // Save to the database\n    // --------------------------------------\n    const { error } = await supa\n      .from(\"lines\")\n      .insert({\n        content: generated_line,\n        meta: meta,\n        active: true,\n        lead_id,\n        lead_job_id: id,\n      })\n      .order(\"created_at\", { ascending: false });\n    if (error) throw error;\n    await setNextState(id, \"FLAG_TO_FINISH\");\n  } catch (error) {\n    console.error(error);\n    await log(\"ERROR\", error.message, id, \"generate\");\n  }\n}\n","import { log } from \"../log\";\nimport { Tables } from \"../../utils/database.helpers\";\nimport { supa } from \"../../utils/supabase\";\nimport { setNextState } from \"../next\";\nimport { billing } from \"../billing\";\n\nexport async function finish(record: Tables<\"leads_jobs\">) {\n  const { id, lead_id, job_id } = record;\n  try {\n    if (!lead_id) throw new Error(\"No lead provided\");\n    if (!job_id) throw new Error(\"No job provided\");\n\n    // Get job data\n    // --------------------------------------\n    const { data: jobData, error: jobErr } = await supa\n      .from(\"jobs\")\n      .select(\"*\")\n      .eq(\"id\", job_id)\n      .limit(1)\n      .single();\n    if (jobErr) throw jobErr;\n    if (!jobData) throw new Error(\"No data\");\n\n    if (!jobData.count_file_rows) {\n      throw new Error(\"Could not could rows provided\");\n    }\n    if (!jobData.user_id) throw new Error(\"Could not find user\");\n\n    // Update gen lines + 1\n    const count_errors = jobData.count_errors ?? 0;\n    const count_file_rows = jobData.count_file_rows;\n    const count_gen_lines = (jobData.count_gen_lines ?? 0) + 1;\n\n    // Finish job if last job\n    // --------------------------------------\n    if ((count_errors + count_gen_lines) === count_file_rows) {\n      // Update job data\n      // --------------------------------------\n      const { error: job3Err } = await supa\n        .from(\"jobs\")\n        .update({\n          status: \"DONE\",\n          count_gen_lines,\n        })\n        .eq(\"id\", job_id);\n      if (job3Err) throw job3Err;\n\n      // If Pro job, create billing\n      if (jobData.product == \"PRO\") {\n        await billing({\n          job_id,\n          count_gen_lines,\n          count_file_rows,\n          user_id: jobData.user_id,\n          leads_job_id: id,\n        });\n      }\n    } else {\n      // Update job data\n      // --------------------------------------\n      const { error: job2Err } = await supa\n        .from(\"jobs\")\n        .update({\n          count_gen_lines,\n        })\n        .eq(\"id\", job_id);\n      if (job2Err) throw job2Err;\n    }\n    // Set the next state\n    // --------------------------------------\n    await setNextState(id, \"DONE\");\n  } catch (error) {\n    console.log(error);\n    await log(\"ERROR\", error.message, id, \"finish\");\n  }\n}\n","import { supa } from \"../../utils/supabase\";\nimport { log } from \"../log\";\n\ninterface Props {\n  job_id: string;\n  count_gen_lines: number;\n  count_file_rows: number;\n  user_id: string;\n  leads_job_id: string;\n}\n\nexport async function billing(props: Props) {\n  const { job_id, count_gen_lines, count_file_rows, user_id, leads_job_id } =\n    props;\n  const { data: billData, error: billErr } = await supa\n    .from(\"billings\")\n    .update({\n      quantity_generated: count_gen_lines,\n      quantity: count_file_rows,\n    })\n    .eq(\"job_id\", job_id)\n    .select(\"*\")\n    .limit(1)\n    .single();\n  if (billErr) throw billErr;\n  if (!billData) new Error(\"No billings found\");\n\n  // Get delta amount between quantity and quantity_generated\n  if (!billData.quantity_generated || !billData.quantity) {\n    throw new Error(\"No quantity\");\n  }\n  const delta = Math.max(\n    billData.quantity - billData.quantity_generated,\n    0,\n  );\n  const carryover = billData.carryover ?? 0;\n\n  // Get current credits\n  const { data: rlData, error: rlErr } = await supa\n    .from(\"ratelimits\")\n    .select(\"credits\")\n    .eq(\"id\", job_id)\n    .limit(1)\n    .single();\n  if (rlErr) throw rlErr;\n  if (!rlData) throw new Error(\"No ratelimits found\");\n  const currentCredits = rlData.credits;\n\n  const newCreditAmount = currentCredits + delta + carryover;\n  const { error: bill2Err } = await supa\n    .from(\"ratelimits\")\n    .update(\n      {\n        credits: newCreditAmount,\n      },\n    ).eq(\"id\", user_id);\n  if (bill2Err) throw bill2Err;\n  await log(\n    \"OK\",\n    { currentCredits, carryover, delta },\n    leads_job_id,\n    \"carryover and delta saved\",\n  );\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}